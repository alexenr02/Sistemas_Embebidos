
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000544  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000544  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  20000434  00000978  00020434  2**2
                  ALLOC
  3 .stack        00002004  2000047c  000009c0  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007b21  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000464  00000000  00000000  00027fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  0002843a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  000284d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00028542  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010ff9  00000000  00000000  00028582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001503  00000000  00000000  0003957b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006ec81  00000000  00000000  0003aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000258  00000000  00000000  000a9700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	80 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	00000544 	.word	0x00000544

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	00000544 	.word	0x00000544
 10c:	00000544 	.word	0x00000544
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
 11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
 11e:	429a      	cmp	r2, r3
 120:	d009      	beq.n	136 <Reset_Handler+0x1e>
 122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
 124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
 126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 128:	6811      	ldr	r1, [r2, #0]
 12a:	6019      	str	r1, [r3, #0]
 12c:	3304      	adds	r3, #4
 12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
 132:	428b      	cmp	r3, r1
 134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
 138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
 13a:	2200      	movs	r2, #0
 13c:	601a      	str	r2, [r3, #0]
 13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
 142:	4293      	cmp	r3, r2
 144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
 148:	21ff      	movs	r1, #255	; 0xff
 14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
 14c:	438b      	bics	r3, r1
 14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 150:	39fd      	subs	r1, #253	; 0xfd
 152:	2390      	movs	r3, #144	; 0x90
 154:	005b      	lsls	r3, r3, #1
 156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
 158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
 15c:	78d3      	ldrb	r3, [r2, #3]
 15e:	2503      	movs	r5, #3
 160:	43ab      	bics	r3, r5
 162:	2402      	movs	r4, #2
 164:	4323      	orrs	r3, r4
 166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	270c      	movs	r7, #12
 16c:	43bb      	bics	r3, r7
 16e:	2608      	movs	r6, #8
 170:	4333      	orrs	r3, r6
 172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
 176:	7b98      	ldrb	r0, [r3, #14]
 178:	2230      	movs	r2, #48	; 0x30
 17a:	4390      	bics	r0, r2
 17c:	2220      	movs	r2, #32
 17e:	4310      	orrs	r0, r2
 180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 182:	7b99      	ldrb	r1, [r3, #14]
 184:	43b9      	bics	r1, r7
 186:	4331      	orrs	r1, r6
 188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18a:	7b9a      	ldrb	r2, [r3, #14]
 18c:	43aa      	bics	r2, r5
 18e:	4322      	orrs	r2, r4
 190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
 194:	6851      	ldr	r1, [r2, #4]
 196:	2380      	movs	r3, #128	; 0x80
 198:	430b      	orrs	r3, r1
 19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
 19e:	4798      	blx	r3
        main();
 1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
 1a2:	4798      	blx	r3
 1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
 1a6:	46c0      	nop			; (mov r8, r8)
 1a8:	00000544 	.word	0x00000544
 1ac:	20000000 	.word	0x20000000
 1b0:	20000434 	.word	0x20000434
 1b4:	20000434 	.word	0x20000434
 1b8:	2000047c 	.word	0x2000047c
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41005000 	.word	0x41005000
 1cc:	41004800 	.word	0x41004800
 1d0:	41004000 	.word	0x41004000
 1d4:	0000037d 	.word	0x0000037d
 1d8:	000001ed 	.word	0x000001ed

000001dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1dc:	4a01      	ldr	r2, [pc, #4]	; (1e4 <SystemInit+0x8>)
 1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SystemInit+0xc>)
 1e0:	601a      	str	r2, [r3, #0]
        return;
}
 1e2:	4770      	bx	lr
 1e4:	000f4240 	.word	0x000f4240
 1e8:	20000000 	.word	0x20000000

000001ec <main>:
volatile uint32_t i;
uint8_t tx_buf[BUF_SIZE] = {DAY_ADDR, 0x03u, 0x22u, 0x04u};
uint8_t rx_buf[BUF_SIZE];

int main(void)
{
 1ec:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 1ee:	4b55      	ldr	r3, [pc, #340]	; (344 <main+0x158>)
 1f0:	4798      	blx	r3
	
	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 1f2:	4a55      	ldr	r2, [pc, #340]	; (348 <main+0x15c>)
 1f4:	6a11      	ldr	r1, [r2, #32]
 1f6:	4b55      	ldr	r3, [pc, #340]	; (34c <main+0x160>)
 1f8:	400b      	ands	r3, r1
 1fa:	6213      	str	r3, [r2, #32]
	
	/* port mux configuration */
	PORT->Group[0].PINCFG[PIN_PA22].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN | PORT_PINCFG_PULLEN; /* SDA */
 1fc:	4b54      	ldr	r3, [pc, #336]	; (350 <main+0x164>)
 1fe:	2207      	movs	r2, #7
 200:	2156      	movs	r1, #86	; 0x56
 202:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[PIN_PA23].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN | PORT_PINCFG_PULLEN; /* SCL */
 204:	3101      	adds	r1, #1
 206:	545a      	strb	r2, [r3, r1]
	
	/* PMUX: even = n/2, odd: (n-1)/2 */
	PORT->Group[0].PMUX[11].reg |= 0x02u;
 208:	391c      	subs	r1, #28
 20a:	5c5a      	ldrb	r2, [r3, r1]
 20c:	2002      	movs	r0, #2
 20e:	4302      	orrs	r2, r0
 210:	b2d2      	uxtb	r2, r2
 212:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[11].reg |= 0x20u;
 214:	5c5a      	ldrb	r2, [r3, r1]
 216:	2020      	movs	r0, #32
 218:	4302      	orrs	r2, r0
 21a:	b2d2      	uxtb	r2, r2
 21c:	545a      	strb	r2, [r3, r1]
	
	/* APBCMASK */
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3;
 21e:	4a4d      	ldr	r2, [pc, #308]	; (354 <main+0x168>)
 220:	6a13      	ldr	r3, [r2, #32]
 222:	391b      	subs	r1, #27
 224:	430b      	orrs	r3, r1
 226:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom3 module*/
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID (SERCOM3_GCLK_ID_CORE) |
 228:	4b4b      	ldr	r3, [pc, #300]	; (358 <main+0x16c>)
 22a:	4a4c      	ldr	r2, [pc, #304]	; (35c <main+0x170>)
 22c:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID (SERCOM3_GCLK_ID_SLOW) |
	GCLK_CLKCTRL_GEN(4) |
	GCLK_CLKCTRL_CLKEN;
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_SRC_OSC8M|GCLK_GENCTRL_GENEN|GCLK_GENCTRL_ID(4);
 22e:	6859      	ldr	r1, [r3, #4]
 230:	4a4b      	ldr	r2, [pc, #300]	; (360 <main+0x174>)
 232:	430a      	orrs	r2, r1
 234:	605a      	str	r2, [r3, #4]

	/* set configuration for SERCOM3 I2C module */
	SERCOM3->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN; /* smart mode enable */
 236:	2280      	movs	r2, #128	; 0x80
 238:	0052      	lsls	r2, r2, #1
 23a:	4b4a      	ldr	r3, [pc, #296]	; (364 <main+0x178>)
 23c:	605a      	str	r2, [r3, #4]
	while (SERCOM3->I2CM.SYNCBUSY.reg); // waiting loading
 23e:	4b49      	ldr	r3, [pc, #292]	; (364 <main+0x178>)
 240:	69db      	ldr	r3, [r3, #28]
 242:	2b00      	cmp	r3, #0
 244:	d1fb      	bne.n	23e <main+0x52>
	
	/* calculate BAUDRATE */
	uint64_t tmp_baud =((8000000/100000)-10-(8000000*250 /1000000000))/2;
	SERCOM3->I2CM.BAUD.bit.BAUD = SERCOM_I2CM_BAUD_BAUD((uint32_t)tmp_baud);
 246:	4947      	ldr	r1, [pc, #284]	; (364 <main+0x178>)
 248:	68ca      	ldr	r2, [r1, #12]
 24a:	33ff      	adds	r3, #255	; 0xff
 24c:	439a      	bics	r2, r3
 24e:	3bdd      	subs	r3, #221	; 0xdd
 250:	4313      	orrs	r3, r2
 252:	60cb      	str	r3, [r1, #12]
	while (SERCOM3->I2CM.SYNCBUSY.reg); // waiting loading
 254:	4b43      	ldr	r3, [pc, #268]	; (364 <main+0x178>)
 256:	69db      	ldr	r3, [r3, #28]
 258:	2b00      	cmp	r3, #0
 25a:	d1fb      	bne.n	254 <main+0x68>
	// value equals 0x22 or decimal 34
	
	SERCOM3->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE   |/* enable module */
 25c:	4a42      	ldr	r2, [pc, #264]	; (368 <main+0x17c>)
 25e:	4b41      	ldr	r3, [pc, #260]	; (364 <main+0x178>)
 260:	601a      	str	r2, [r3, #0]
	SERCOM_I2CM_CTRLA_MODE_I2C_MASTER |		/* i2c master mode */
	SERCOM_I2CM_CTRLA_SDAHOLD(3);		 /* SDA hold time to 600ns */
	while (SERCOM3->I2CM.SYNCBUSY.reg);  /* waiting loading */
 262:	4b40      	ldr	r3, [pc, #256]	; (364 <main+0x178>)
 264:	69db      	ldr	r3, [r3, #28]
 266:	2b00      	cmp	r3, #0
 268:	d1fb      	bne.n	262 <main+0x76>

	SERCOM3->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1); /* set to idle state */
 26a:	4a3e      	ldr	r2, [pc, #248]	; (364 <main+0x178>)
 26c:	8b53      	ldrh	r3, [r2, #26]
 26e:	2110      	movs	r1, #16
 270:	430b      	orrs	r3, r1
 272:	b29b      	uxth	r3, r3
 274:	8353      	strh	r3, [r2, #26]
	while (SERCOM3->I2CM.SYNCBUSY.reg);  /* waiting loading */
 276:	4b3b      	ldr	r3, [pc, #236]	; (364 <main+0x178>)
 278:	69db      	ldr	r3, [r3, #28]
 27a:	2b00      	cmp	r3, #0
 27c:	d1fb      	bne.n	276 <main+0x8a>
	
	/******************  SENDING SEQUENCE  **********************/
	// Sending 4 bytes to an RTC. First Byte is the pointer of the RTC memory.
	/* slave address with write signal (0) */
	SERCOM3->I2CM.ADDR.reg = (SLAVE_ADDR << 1) | 0;    /* Sending slave address in write mode */
 27e:	22d0      	movs	r2, #208	; 0xd0
 280:	4b38      	ldr	r3, [pc, #224]	; (364 <main+0x178>)
 282:	625a      	str	r2, [r3, #36]	; 0x24
	while(!SERCOM3->I2CM.INTFLAG.bit.MB);		   /* MB = 1 if slave NACKS the address */
 284:	4b37      	ldr	r3, [pc, #220]	; (364 <main+0x178>)
 286:	7e1b      	ldrb	r3, [r3, #24]
 288:	07db      	lsls	r3, r3, #31
 28a:	d5fb      	bpl.n	284 <main+0x98>
	
	for(i=0; i<BUF_SIZE; i++) {
 28c:	2200      	movs	r2, #0
 28e:	4b37      	ldr	r3, [pc, #220]	; (36c <main+0x180>)
 290:	601a      	str	r2, [r3, #0]
 292:	e00e      	b.n	2b2 <main+0xc6>
		/* placing the data from transmitting buffer to DATA register*/
		SERCOM3->I2CM.DATA.reg = tx_buf[i];
 294:	4b35      	ldr	r3, [pc, #212]	; (36c <main+0x180>)
 296:	681b      	ldr	r3, [r3, #0]
 298:	4a35      	ldr	r2, [pc, #212]	; (370 <main+0x184>)
 29a:	5cd1      	ldrb	r1, [r2, r3]
 29c:	2328      	movs	r3, #40	; 0x28
 29e:	4a31      	ldr	r2, [pc, #196]	; (364 <main+0x178>)
 2a0:	54d1      	strb	r1, [r2, r3]
		while(!SERCOM3->I2CM.INTFLAG.bit.MB){}; /* MB = 1 if slave NACKS the address */
 2a2:	4b30      	ldr	r3, [pc, #192]	; (364 <main+0x178>)
 2a4:	7e1b      	ldrb	r3, [r3, #24]
 2a6:	07db      	lsls	r3, r3, #31
 2a8:	d5fb      	bpl.n	2a2 <main+0xb6>
	for(i=0; i<BUF_SIZE; i++) {
 2aa:	4a30      	ldr	r2, [pc, #192]	; (36c <main+0x180>)
 2ac:	6813      	ldr	r3, [r2, #0]
 2ae:	3301      	adds	r3, #1
 2b0:	6013      	str	r3, [r2, #0]
 2b2:	4b2e      	ldr	r3, [pc, #184]	; (36c <main+0x180>)
 2b4:	681b      	ldr	r3, [r3, #0]
 2b6:	2b03      	cmp	r3, #3
 2b8:	d9ec      	bls.n	294 <main+0xa8>
	}

	/* After transferring the last byte stop condition will be sent */
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x3;
 2ba:	4a2a      	ldr	r2, [pc, #168]	; (364 <main+0x178>)
 2bc:	6851      	ldr	r1, [r2, #4]
 2be:	23c0      	movs	r3, #192	; 0xc0
 2c0:	029b      	lsls	r3, r3, #10
 2c2:	430b      	orrs	r3, r1
 2c4:	6053      	str	r3, [r2, #4]
	
	/******************  RELOCATING POINTER BEFORE RECEIVING  *************************/
	/* slave address with write signal (0) */
	SERCOM3->I2CM.ADDR.reg = (SLAVE_ADDR << 1) | 0;    /* Sending slave address in write mode */
 2c6:	23d0      	movs	r3, #208	; 0xd0
 2c8:	6253      	str	r3, [r2, #36]	; 0x24
	
	while(SERCOM3->I2CM.INTFLAG.bit.MB ==0);		   /* MB = 1 if slave NACKS the address */
 2ca:	4b26      	ldr	r3, [pc, #152]	; (364 <main+0x178>)
 2cc:	7e1b      	ldrb	r3, [r3, #24]
 2ce:	07db      	lsls	r3, r3, #31
 2d0:	d5fb      	bpl.n	2ca <main+0xde>
	SERCOM3->I2CM.DATA.reg = DAY_ADDR;                 /* Sending address (seconds) for internal pointer */
 2d2:	2103      	movs	r1, #3
 2d4:	2328      	movs	r3, #40	; 0x28
 2d6:	4a23      	ldr	r2, [pc, #140]	; (364 <main+0x178>)
 2d8:	54d1      	strb	r1, [r2, r3]
	
	while(SERCOM3->I2CM.INTFLAG.bit.MB ==0){};         /* MB = 1 if slave NACKS the address */
 2da:	4b22      	ldr	r3, [pc, #136]	; (364 <main+0x178>)
 2dc:	7e1b      	ldrb	r3, [r3, #24]
 2de:	07db      	lsls	r3, r3, #31
 2e0:	d5fb      	bpl.n	2da <main+0xee>
	
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x1;                 /* Sending repetead start condition */	
 2e2:	4920      	ldr	r1, [pc, #128]	; (364 <main+0x178>)
 2e4:	684a      	ldr	r2, [r1, #4]
 2e6:	4b23      	ldr	r3, [pc, #140]	; (374 <main+0x188>)
 2e8:	401a      	ands	r2, r3
 2ea:	2380      	movs	r3, #128	; 0x80
 2ec:	025b      	lsls	r3, r3, #9
 2ee:	4313      	orrs	r3, r2
 2f0:	604b      	str	r3, [r1, #4]
	
	/******************  RECIEVING SEQUENCE  *************************/
	/* slave address with read signal (1) */
	SERCOM3->I2CM.ADDR.reg = (SLAVE_ADDR << 1) | 1;
 2f2:	23d1      	movs	r3, #209	; 0xd1
 2f4:	624b      	str	r3, [r1, #36]	; 0x24
	while(SERCOM3->I2CM.INTFLAG.bit.SB==0){};
 2f6:	4b1b      	ldr	r3, [pc, #108]	; (364 <main+0x178>)
 2f8:	7e1b      	ldrb	r3, [r3, #24]
 2fa:	079b      	lsls	r3, r3, #30
 2fc:	d5fb      	bpl.n	2f6 <main+0x10a>

	for(i=0; i< BUF_SIZE-1; i++) {
 2fe:	2200      	movs	r2, #0
 300:	4b1a      	ldr	r3, [pc, #104]	; (36c <main+0x180>)
 302:	601a      	str	r2, [r3, #0]
 304:	e00e      	b.n	324 <main+0x138>
		rx_buf[i] = SERCOM3->I2CM.DATA.reg;
 306:	4b19      	ldr	r3, [pc, #100]	; (36c <main+0x180>)
 308:	681b      	ldr	r3, [r3, #0]
 30a:	2228      	movs	r2, #40	; 0x28
 30c:	4915      	ldr	r1, [pc, #84]	; (364 <main+0x178>)
 30e:	5c89      	ldrb	r1, [r1, r2]
 310:	4a19      	ldr	r2, [pc, #100]	; (378 <main+0x18c>)
 312:	54d1      	strb	r1, [r2, r3]
		while(SERCOM3->I2CM.INTFLAG.bit.SB==0){};
 314:	4b13      	ldr	r3, [pc, #76]	; (364 <main+0x178>)
 316:	7e1b      	ldrb	r3, [r3, #24]
 318:	079b      	lsls	r3, r3, #30
 31a:	d5fb      	bpl.n	314 <main+0x128>
	for(i=0; i< BUF_SIZE-1; i++) {
 31c:	4a13      	ldr	r2, [pc, #76]	; (36c <main+0x180>)
 31e:	6813      	ldr	r3, [r2, #0]
 320:	3301      	adds	r3, #1
 322:	6013      	str	r3, [r2, #0]
 324:	4b11      	ldr	r3, [pc, #68]	; (36c <main+0x180>)
 326:	681b      	ldr	r3, [r3, #0]
 328:	2b02      	cmp	r3, #2
 32a:	d9ec      	bls.n	306 <main+0x11a>
	}
	
	/* After receiving the last byte stop condition will be sent */
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x3;
 32c:	4b0d      	ldr	r3, [pc, #52]	; (364 <main+0x178>)
 32e:	6859      	ldr	r1, [r3, #4]
 330:	22c0      	movs	r2, #192	; 0xc0
 332:	0292      	lsls	r2, r2, #10
 334:	430a      	orrs	r2, r1
 336:	605a      	str	r2, [r3, #4]
	
	// Turn off the I2C
	SERCOM3->I2CM.CTRLA.bit.ENABLE = 0x0u;
 338:	6819      	ldr	r1, [r3, #0]
 33a:	2202      	movs	r2, #2
 33c:	4391      	bics	r1, r2
 33e:	6019      	str	r1, [r3, #0]
 340:	2000      	movs	r0, #0
 342:	bd10      	pop	{r4, pc}
 344:	000001dd 	.word	0x000001dd
 348:	40000800 	.word	0x40000800
 34c:	fffffcff 	.word	0xfffffcff
 350:	41004400 	.word	0x41004400
 354:	40000400 	.word	0x40000400
 358:	40000c00 	.word	0x40000c00
 35c:	00004417 	.word	0x00004417
 360:	00010604 	.word	0x00010604
 364:	42001400 	.word	0x42001400
 368:	00300016 	.word	0x00300016
 36c:	20000450 	.word	0x20000450
 370:	20000004 	.word	0x20000004
 374:	fffcffff 	.word	0xfffcffff
 378:	20000454 	.word	0x20000454

0000037c <__libc_init_array>:
 37c:	b570      	push	{r4, r5, r6, lr}
 37e:	4e0d      	ldr	r6, [pc, #52]	; (3b4 <__libc_init_array+0x38>)
 380:	4d0d      	ldr	r5, [pc, #52]	; (3b8 <__libc_init_array+0x3c>)
 382:	2400      	movs	r4, #0
 384:	1bad      	subs	r5, r5, r6
 386:	10ad      	asrs	r5, r5, #2
 388:	d005      	beq.n	396 <__libc_init_array+0x1a>
 38a:	00a3      	lsls	r3, r4, #2
 38c:	58f3      	ldr	r3, [r6, r3]
 38e:	3401      	adds	r4, #1
 390:	4798      	blx	r3
 392:	42a5      	cmp	r5, r4
 394:	d1f9      	bne.n	38a <__libc_init_array+0xe>
 396:	f000 f8c3 	bl	520 <_init>
 39a:	4e08      	ldr	r6, [pc, #32]	; (3bc <__libc_init_array+0x40>)
 39c:	4d08      	ldr	r5, [pc, #32]	; (3c0 <__libc_init_array+0x44>)
 39e:	2400      	movs	r4, #0
 3a0:	1bad      	subs	r5, r5, r6
 3a2:	10ad      	asrs	r5, r5, #2
 3a4:	d005      	beq.n	3b2 <__libc_init_array+0x36>
 3a6:	00a3      	lsls	r3, r4, #2
 3a8:	58f3      	ldr	r3, [r6, r3]
 3aa:	3401      	adds	r4, #1
 3ac:	4798      	blx	r3
 3ae:	42a5      	cmp	r5, r4
 3b0:	d1f9      	bne.n	3a6 <__libc_init_array+0x2a>
 3b2:	bd70      	pop	{r4, r5, r6, pc}
 3b4:	0000052c 	.word	0x0000052c
 3b8:	0000052c 	.word	0x0000052c
 3bc:	0000052c 	.word	0x0000052c
 3c0:	00000534 	.word	0x00000534

000003c4 <register_fini>:
 3c4:	4b03      	ldr	r3, [pc, #12]	; (3d4 <register_fini+0x10>)
 3c6:	b510      	push	{r4, lr}
 3c8:	2b00      	cmp	r3, #0
 3ca:	d002      	beq.n	3d2 <register_fini+0xe>
 3cc:	4802      	ldr	r0, [pc, #8]	; (3d8 <register_fini+0x14>)
 3ce:	f000 f805 	bl	3dc <atexit>
 3d2:	bd10      	pop	{r4, pc}
 3d4:	00000000 	.word	0x00000000
 3d8:	000003ed 	.word	0x000003ed

000003dc <atexit>:
 3dc:	b510      	push	{r4, lr}
 3de:	0001      	movs	r1, r0
 3e0:	2300      	movs	r3, #0
 3e2:	2200      	movs	r2, #0
 3e4:	2000      	movs	r0, #0
 3e6:	f000 f81f 	bl	428 <__register_exitproc>
 3ea:	bd10      	pop	{r4, pc}

000003ec <__libc_fini_array>:
 3ec:	b570      	push	{r4, r5, r6, lr}
 3ee:	4b09      	ldr	r3, [pc, #36]	; (414 <__libc_fini_array+0x28>)
 3f0:	4c09      	ldr	r4, [pc, #36]	; (418 <__libc_fini_array+0x2c>)
 3f2:	1ae4      	subs	r4, r4, r3
 3f4:	10a4      	asrs	r4, r4, #2
 3f6:	d009      	beq.n	40c <__libc_fini_array+0x20>
 3f8:	4a08      	ldr	r2, [pc, #32]	; (41c <__libc_fini_array+0x30>)
 3fa:	18a5      	adds	r5, r4, r2
 3fc:	00ad      	lsls	r5, r5, #2
 3fe:	18ed      	adds	r5, r5, r3
 400:	682b      	ldr	r3, [r5, #0]
 402:	3c01      	subs	r4, #1
 404:	4798      	blx	r3
 406:	3d04      	subs	r5, #4
 408:	2c00      	cmp	r4, #0
 40a:	d1f9      	bne.n	400 <__libc_fini_array+0x14>
 40c:	f000 f892 	bl	534 <_fini>
 410:	bd70      	pop	{r4, r5, r6, pc}
 412:	46c0      	nop			; (mov r8, r8)
 414:	00000540 	.word	0x00000540
 418:	00000544 	.word	0x00000544
 41c:	3fffffff 	.word	0x3fffffff

00000420 <__retarget_lock_acquire_recursive>:
 420:	4770      	bx	lr
 422:	46c0      	nop			; (mov r8, r8)

00000424 <__retarget_lock_release_recursive>:
 424:	4770      	bx	lr
 426:	46c0      	nop			; (mov r8, r8)

00000428 <__register_exitproc>:
 428:	b5f0      	push	{r4, r5, r6, r7, lr}
 42a:	464e      	mov	r6, r9
 42c:	4645      	mov	r5, r8
 42e:	46de      	mov	lr, fp
 430:	4657      	mov	r7, sl
 432:	b5e0      	push	{r5, r6, r7, lr}
 434:	4d36      	ldr	r5, [pc, #216]	; (510 <__register_exitproc+0xe8>)
 436:	b083      	sub	sp, #12
 438:	0006      	movs	r6, r0
 43a:	6828      	ldr	r0, [r5, #0]
 43c:	4698      	mov	r8, r3
 43e:	000f      	movs	r7, r1
 440:	4691      	mov	r9, r2
 442:	f7ff ffed 	bl	420 <__retarget_lock_acquire_recursive>
 446:	4b33      	ldr	r3, [pc, #204]	; (514 <__register_exitproc+0xec>)
 448:	681c      	ldr	r4, [r3, #0]
 44a:	23a4      	movs	r3, #164	; 0xa4
 44c:	005b      	lsls	r3, r3, #1
 44e:	58e0      	ldr	r0, [r4, r3]
 450:	2800      	cmp	r0, #0
 452:	d052      	beq.n	4fa <__register_exitproc+0xd2>
 454:	6843      	ldr	r3, [r0, #4]
 456:	2b1f      	cmp	r3, #31
 458:	dc13      	bgt.n	482 <__register_exitproc+0x5a>
 45a:	1c5a      	adds	r2, r3, #1
 45c:	9201      	str	r2, [sp, #4]
 45e:	2e00      	cmp	r6, #0
 460:	d128      	bne.n	4b4 <__register_exitproc+0x8c>
 462:	9a01      	ldr	r2, [sp, #4]
 464:	3302      	adds	r3, #2
 466:	009b      	lsls	r3, r3, #2
 468:	6042      	str	r2, [r0, #4]
 46a:	501f      	str	r7, [r3, r0]
 46c:	6828      	ldr	r0, [r5, #0]
 46e:	f7ff ffd9 	bl	424 <__retarget_lock_release_recursive>
 472:	2000      	movs	r0, #0
 474:	b003      	add	sp, #12
 476:	bc3c      	pop	{r2, r3, r4, r5}
 478:	4690      	mov	r8, r2
 47a:	4699      	mov	r9, r3
 47c:	46a2      	mov	sl, r4
 47e:	46ab      	mov	fp, r5
 480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 482:	4b25      	ldr	r3, [pc, #148]	; (518 <__register_exitproc+0xf0>)
 484:	2b00      	cmp	r3, #0
 486:	d03d      	beq.n	504 <__register_exitproc+0xdc>
 488:	20c8      	movs	r0, #200	; 0xc8
 48a:	0040      	lsls	r0, r0, #1
 48c:	e000      	b.n	490 <__register_exitproc+0x68>
 48e:	bf00      	nop
 490:	2800      	cmp	r0, #0
 492:	d037      	beq.n	504 <__register_exitproc+0xdc>
 494:	22a4      	movs	r2, #164	; 0xa4
 496:	2300      	movs	r3, #0
 498:	0052      	lsls	r2, r2, #1
 49a:	58a1      	ldr	r1, [r4, r2]
 49c:	6043      	str	r3, [r0, #4]
 49e:	6001      	str	r1, [r0, #0]
 4a0:	50a0      	str	r0, [r4, r2]
 4a2:	3240      	adds	r2, #64	; 0x40
 4a4:	5083      	str	r3, [r0, r2]
 4a6:	3204      	adds	r2, #4
 4a8:	5083      	str	r3, [r0, r2]
 4aa:	3301      	adds	r3, #1
 4ac:	9301      	str	r3, [sp, #4]
 4ae:	2300      	movs	r3, #0
 4b0:	2e00      	cmp	r6, #0
 4b2:	d0d6      	beq.n	462 <__register_exitproc+0x3a>
 4b4:	009a      	lsls	r2, r3, #2
 4b6:	4692      	mov	sl, r2
 4b8:	4482      	add	sl, r0
 4ba:	464a      	mov	r2, r9
 4bc:	2188      	movs	r1, #136	; 0x88
 4be:	4654      	mov	r4, sl
 4c0:	5062      	str	r2, [r4, r1]
 4c2:	22c4      	movs	r2, #196	; 0xc4
 4c4:	0052      	lsls	r2, r2, #1
 4c6:	4691      	mov	r9, r2
 4c8:	4481      	add	r9, r0
 4ca:	464a      	mov	r2, r9
 4cc:	3987      	subs	r1, #135	; 0x87
 4ce:	4099      	lsls	r1, r3
 4d0:	6812      	ldr	r2, [r2, #0]
 4d2:	468b      	mov	fp, r1
 4d4:	430a      	orrs	r2, r1
 4d6:	4694      	mov	ip, r2
 4d8:	464a      	mov	r2, r9
 4da:	4661      	mov	r1, ip
 4dc:	6011      	str	r1, [r2, #0]
 4de:	2284      	movs	r2, #132	; 0x84
 4e0:	4641      	mov	r1, r8
 4e2:	0052      	lsls	r2, r2, #1
 4e4:	50a1      	str	r1, [r4, r2]
 4e6:	2e02      	cmp	r6, #2
 4e8:	d1bb      	bne.n	462 <__register_exitproc+0x3a>
 4ea:	0002      	movs	r2, r0
 4ec:	465c      	mov	r4, fp
 4ee:	328d      	adds	r2, #141	; 0x8d
 4f0:	32ff      	adds	r2, #255	; 0xff
 4f2:	6811      	ldr	r1, [r2, #0]
 4f4:	430c      	orrs	r4, r1
 4f6:	6014      	str	r4, [r2, #0]
 4f8:	e7b3      	b.n	462 <__register_exitproc+0x3a>
 4fa:	0020      	movs	r0, r4
 4fc:	304d      	adds	r0, #77	; 0x4d
 4fe:	30ff      	adds	r0, #255	; 0xff
 500:	50e0      	str	r0, [r4, r3]
 502:	e7a7      	b.n	454 <__register_exitproc+0x2c>
 504:	6828      	ldr	r0, [r5, #0]
 506:	f7ff ff8d 	bl	424 <__retarget_lock_release_recursive>
 50a:	2001      	movs	r0, #1
 50c:	4240      	negs	r0, r0
 50e:	e7b1      	b.n	474 <__register_exitproc+0x4c>
 510:	20000430 	.word	0x20000430
 514:	0000051c 	.word	0x0000051c
 518:	00000000 	.word	0x00000000

0000051c <_global_impure_ptr>:
 51c:	20000008                                ... 

00000520 <_init>:
 520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 522:	46c0      	nop			; (mov r8, r8)
 524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 526:	bc08      	pop	{r3}
 528:	469e      	mov	lr, r3
 52a:	4770      	bx	lr

0000052c <__init_array_start>:
 52c:	000003c5 	.word	0x000003c5

00000530 <__frame_dummy_init_array_entry>:
 530:	000000dd                                ....

00000534 <_fini>:
 534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 536:	46c0      	nop			; (mov r8, r8)
 538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 53a:	bc08      	pop	{r3}
 53c:	469e      	mov	lr, r3
 53e:	4770      	bx	lr

00000540 <__fini_array_start>:
 540:	000000b5 	.word	0x000000b5
