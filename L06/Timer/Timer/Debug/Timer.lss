
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  0000043c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00000870  00020434  2**2
                  ALLOC
  3 .stack        00002004  20000474  000008b0  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000059da  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000433  00000000  00000000  00025e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  000262c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  0002635a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000263ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010fd4  00000000  00000000  0002640a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000014a7  00000000  00000000  000373de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e51b  00000000  00000000  00038885  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000258  00000000  00000000  000a6da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     x$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	0000043c 	.word	0x0000043c

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	0000043c 	.word	0x0000043c
 10c:	0000043c 	.word	0x0000043c
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
 11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
 11e:	429a      	cmp	r2, r3
 120:	d009      	beq.n	136 <Reset_Handler+0x1e>
 122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
 124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
 126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 128:	6811      	ldr	r1, [r2, #0]
 12a:	6019      	str	r1, [r3, #0]
 12c:	3304      	adds	r3, #4
 12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
 132:	428b      	cmp	r3, r1
 134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
 138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
 13a:	2200      	movs	r2, #0
 13c:	601a      	str	r2, [r3, #0]
 13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
 142:	4293      	cmp	r3, r2
 144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
 148:	21ff      	movs	r1, #255	; 0xff
 14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
 14c:	438b      	bics	r3, r1
 14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 150:	39fd      	subs	r1, #253	; 0xfd
 152:	2390      	movs	r3, #144	; 0x90
 154:	005b      	lsls	r3, r3, #1
 156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
 158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
 15c:	78d3      	ldrb	r3, [r2, #3]
 15e:	2503      	movs	r5, #3
 160:	43ab      	bics	r3, r5
 162:	2402      	movs	r4, #2
 164:	4323      	orrs	r3, r4
 166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	270c      	movs	r7, #12
 16c:	43bb      	bics	r3, r7
 16e:	2608      	movs	r6, #8
 170:	4333      	orrs	r3, r6
 172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
 176:	7b98      	ldrb	r0, [r3, #14]
 178:	2230      	movs	r2, #48	; 0x30
 17a:	4390      	bics	r0, r2
 17c:	2220      	movs	r2, #32
 17e:	4310      	orrs	r0, r2
 180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 182:	7b99      	ldrb	r1, [r3, #14]
 184:	43b9      	bics	r1, r7
 186:	4331      	orrs	r1, r6
 188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18a:	7b9a      	ldrb	r2, [r3, #14]
 18c:	43aa      	bics	r2, r5
 18e:	4322      	orrs	r2, r4
 190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
 194:	6851      	ldr	r1, [r2, #4]
 196:	2380      	movs	r3, #128	; 0x80
 198:	430b      	orrs	r3, r1
 19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
 19e:	4798      	blx	r3
        main();
 1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
 1a2:	4798      	blx	r3
 1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
 1a6:	46c0      	nop			; (mov r8, r8)
 1a8:	0000043c 	.word	0x0000043c
 1ac:	20000000 	.word	0x20000000
 1b0:	20000434 	.word	0x20000434
 1b4:	20000434 	.word	0x20000434
 1b8:	20000474 	.word	0x20000474
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41005000 	.word	0x41005000
 1cc:	41004800 	.word	0x41004800
 1d0:	41004000 	.word	0x41004000
 1d4:	00000275 	.word	0x00000275
 1d8:	000001ed 	.word	0x000001ed

000001dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1dc:	4a01      	ldr	r2, [pc, #4]	; (1e4 <SystemInit+0x8>)
 1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SystemInit+0xc>)
 1e0:	601a      	str	r2, [r3, #0]
        return;
}
 1e2:	4770      	bx	lr
 1e4:	000f4240 	.word	0x000f4240
 1e8:	20000000 	.word	0x20000000

000001ec <main>:
#define PINCFG_CONFIG_VALUE 0b00000000
#define GENCTRL_CONFIG_VALUE 0x10600
#define CLKCTRL_CONFIG_VALUE 0x401B
#define TIMER_INIT_COUNT 65307
 
int main(void) {
 1ec:	b510      	push	{r4, lr}

   	/* Initialize the SAM system */
	SystemInit();
 1ee:	4b1b      	ldr	r3, [pc, #108]	; (25c <main+0x70>)
 1f0:	4798      	blx	r3
 
    //PORT configuration for general-purpose PIN
   	PORT->Group[0].PINCFG[14].reg = PINCFG_CONFIG_VALUE;
 1f2:	4b1b      	ldr	r3, [pc, #108]	; (260 <main+0x74>)
 1f4:	2200      	movs	r2, #0
 1f6:	214e      	movs	r1, #78	; 0x4e
 1f8:	545a      	strb	r2, [r3, r1]
   	PORT->Group[0].DIRSET.reg = PORT_PA14;
 1fa:	2180      	movs	r1, #128	; 0x80
 1fc:	01c9      	lsls	r1, r1, #7
 1fe:	6099      	str	r1, [r3, #8]
   	//TIMER configuration
   	//Configure the POWER MANAGER to enable the TC3 module
        	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
 200:	4918      	ldr	r1, [pc, #96]	; (264 <main+0x78>)
 202:	6a08      	ldr	r0, [r1, #32]
 204:	2380      	movs	r3, #128	; 0x80
 206:	011b      	lsls	r3, r3, #4
 208:	4303      	orrs	r3, r0
 20a:	620b      	str	r3, [r1, #32]
   	//Configure the GENERIC CLOCK CONTROL used by the TC3 module
			GCLK->GENDIV.reg = GCLK_GENDIV_RESETVALUE;
 20c:	4b16      	ldr	r3, [pc, #88]	; (268 <main+0x7c>)
 20e:	609a      	str	r2, [r3, #8]
			GCLK->GENCTRL.reg = GENCTRL_CONFIG_VALUE;
 210:	2183      	movs	r1, #131	; 0x83
 212:	0249      	lsls	r1, r1, #9
 214:	6059      	str	r1, [r3, #4]
			GCLK->CLKCTRL.reg = CLKCTRL_CONFIG_VALUE;
 216:	4915      	ldr	r1, [pc, #84]	; (26c <main+0x80>)
 218:	8059      	strh	r1, [r3, #2]
	//Determine the initial count
    //Time = Toscillator * (2^TIMERMODE - COUNT) * Prescaler
			TC3->COUNT16.COUNT.reg = TIMER_INIT_COUNT;
 21a:	4b15      	ldr	r3, [pc, #84]	; (270 <main+0x84>)
 21c:	21e5      	movs	r1, #229	; 0xe5
 21e:	4249      	negs	r1, r1
 220:	8219      	strh	r1, [r3, #16]
	//Configure the TC3 peripheral
			TC3->COUNT16.CTRLA.reg = TC_CTRLA_RESETVALUE;
 222:	801a      	strh	r2, [r3, #0]
			TC3->COUNT8.CTRLBSET.reg = TC_CTRLBSET_RESETVALUE;
 224:	715a      	strb	r2, [r3, #5]
			TC3->COUNT8.INTFLAG.reg = TC_INTENCLR_OVF;
 226:	2201      	movs	r2, #1
 228:	739a      	strb	r2, [r3, #14]
	//Enabling the TC3 peripheral
			TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
 22a:	881a      	ldrh	r2, [r3, #0]
 22c:	2102      	movs	r1, #2
 22e:	430a      	orrs	r2, r1
 230:	b292      	uxth	r2, r2
 232:	801a      	strh	r2, [r3, #0]
	//Loop to sync the TC clock with the processor/main clock
			while(TC3->COUNT8.STATUS.reg == TC_STATUS_SYNCBUSY);
 234:	4b0e      	ldr	r3, [pc, #56]	; (270 <main+0x84>)
 236:	7bdb      	ldrb	r3, [r3, #15]
 238:	b2db      	uxtb	r3, r3
 23a:	2b80      	cmp	r3, #128	; 0x80
 23c:	d0fa      	beq.n	234 <main+0x48>
			//EXTRA cycles to ADD to the initial count---it will be still a 
			//polling-error of +/- 7 us in the period of the signal
			//LDRB(4) + ANDS(1) + BEQ(2) + LDRB(4) + ANDS(1) + BEQ(1) + STR(4) + 
			//STRB(4) + STRH(4) + B(2) = 27 cycles
		while(1){
			if(TC3->COUNT8.INTFLAG.reg != TC_INTENCLR_OVF){
 23e:	4b0c      	ldr	r3, [pc, #48]	; (270 <main+0x84>)
 240:	7b9b      	ldrb	r3, [r3, #14]
 242:	2b01      	cmp	r3, #1
 244:	d0fb      	beq.n	23e <main+0x52>
				PORT->Group[0].OUTTGL.reg = PORT_PA14;
 246:	2280      	movs	r2, #128	; 0x80
 248:	01d2      	lsls	r2, r2, #7
 24a:	4b05      	ldr	r3, [pc, #20]	; (260 <main+0x74>)
 24c:	61da      	str	r2, [r3, #28]
				TC3->COUNT8.INTFLAG.reg = TC_INTENCLR_OVF;
 24e:	4b08      	ldr	r3, [pc, #32]	; (270 <main+0x84>)
 250:	2201      	movs	r2, #1
 252:	739a      	strb	r2, [r3, #14]
				TC3->COUNT16.COUNT.reg = TIMER_INIT_COUNT;
 254:	3ae6      	subs	r2, #230	; 0xe6
 256:	821a      	strh	r2, [r3, #16]
 258:	e7f1      	b.n	23e <main+0x52>
 25a:	46c0      	nop			; (mov r8, r8)
 25c:	000001dd 	.word	0x000001dd
 260:	41004400 	.word	0x41004400
 264:	40000400 	.word	0x40000400
 268:	40000c00 	.word	0x40000c00
 26c:	0000401b 	.word	0x0000401b
 270:	42002c00 	.word	0x42002c00

00000274 <__libc_init_array>:
 274:	b570      	push	{r4, r5, r6, lr}
 276:	4e0d      	ldr	r6, [pc, #52]	; (2ac <__libc_init_array+0x38>)
 278:	4d0d      	ldr	r5, [pc, #52]	; (2b0 <__libc_init_array+0x3c>)
 27a:	2400      	movs	r4, #0
 27c:	1bad      	subs	r5, r5, r6
 27e:	10ad      	asrs	r5, r5, #2
 280:	d005      	beq.n	28e <__libc_init_array+0x1a>
 282:	00a3      	lsls	r3, r4, #2
 284:	58f3      	ldr	r3, [r6, r3]
 286:	3401      	adds	r4, #1
 288:	4798      	blx	r3
 28a:	42a5      	cmp	r5, r4
 28c:	d1f9      	bne.n	282 <__libc_init_array+0xe>
 28e:	f000 f8c3 	bl	418 <_init>
 292:	4e08      	ldr	r6, [pc, #32]	; (2b4 <__libc_init_array+0x40>)
 294:	4d08      	ldr	r5, [pc, #32]	; (2b8 <__libc_init_array+0x44>)
 296:	2400      	movs	r4, #0
 298:	1bad      	subs	r5, r5, r6
 29a:	10ad      	asrs	r5, r5, #2
 29c:	d005      	beq.n	2aa <__libc_init_array+0x36>
 29e:	00a3      	lsls	r3, r4, #2
 2a0:	58f3      	ldr	r3, [r6, r3]
 2a2:	3401      	adds	r4, #1
 2a4:	4798      	blx	r3
 2a6:	42a5      	cmp	r5, r4
 2a8:	d1f9      	bne.n	29e <__libc_init_array+0x2a>
 2aa:	bd70      	pop	{r4, r5, r6, pc}
 2ac:	00000424 	.word	0x00000424
 2b0:	00000424 	.word	0x00000424
 2b4:	00000424 	.word	0x00000424
 2b8:	0000042c 	.word	0x0000042c

000002bc <register_fini>:
 2bc:	4b03      	ldr	r3, [pc, #12]	; (2cc <register_fini+0x10>)
 2be:	b510      	push	{r4, lr}
 2c0:	2b00      	cmp	r3, #0
 2c2:	d002      	beq.n	2ca <register_fini+0xe>
 2c4:	4802      	ldr	r0, [pc, #8]	; (2d0 <register_fini+0x14>)
 2c6:	f000 f805 	bl	2d4 <atexit>
 2ca:	bd10      	pop	{r4, pc}
 2cc:	00000000 	.word	0x00000000
 2d0:	000002e5 	.word	0x000002e5

000002d4 <atexit>:
 2d4:	b510      	push	{r4, lr}
 2d6:	0001      	movs	r1, r0
 2d8:	2300      	movs	r3, #0
 2da:	2200      	movs	r2, #0
 2dc:	2000      	movs	r0, #0
 2de:	f000 f81f 	bl	320 <__register_exitproc>
 2e2:	bd10      	pop	{r4, pc}

000002e4 <__libc_fini_array>:
 2e4:	b570      	push	{r4, r5, r6, lr}
 2e6:	4b09      	ldr	r3, [pc, #36]	; (30c <__libc_fini_array+0x28>)
 2e8:	4c09      	ldr	r4, [pc, #36]	; (310 <__libc_fini_array+0x2c>)
 2ea:	1ae4      	subs	r4, r4, r3
 2ec:	10a4      	asrs	r4, r4, #2
 2ee:	d009      	beq.n	304 <__libc_fini_array+0x20>
 2f0:	4a08      	ldr	r2, [pc, #32]	; (314 <__libc_fini_array+0x30>)
 2f2:	18a5      	adds	r5, r4, r2
 2f4:	00ad      	lsls	r5, r5, #2
 2f6:	18ed      	adds	r5, r5, r3
 2f8:	682b      	ldr	r3, [r5, #0]
 2fa:	3c01      	subs	r4, #1
 2fc:	4798      	blx	r3
 2fe:	3d04      	subs	r5, #4
 300:	2c00      	cmp	r4, #0
 302:	d1f9      	bne.n	2f8 <__libc_fini_array+0x14>
 304:	f000 f892 	bl	42c <_fini>
 308:	bd70      	pop	{r4, r5, r6, pc}
 30a:	46c0      	nop			; (mov r8, r8)
 30c:	00000438 	.word	0x00000438
 310:	0000043c 	.word	0x0000043c
 314:	3fffffff 	.word	0x3fffffff

00000318 <__retarget_lock_acquire_recursive>:
 318:	4770      	bx	lr
 31a:	46c0      	nop			; (mov r8, r8)

0000031c <__retarget_lock_release_recursive>:
 31c:	4770      	bx	lr
 31e:	46c0      	nop			; (mov r8, r8)

00000320 <__register_exitproc>:
 320:	b5f0      	push	{r4, r5, r6, r7, lr}
 322:	464e      	mov	r6, r9
 324:	4645      	mov	r5, r8
 326:	46de      	mov	lr, fp
 328:	4657      	mov	r7, sl
 32a:	b5e0      	push	{r5, r6, r7, lr}
 32c:	4d36      	ldr	r5, [pc, #216]	; (408 <__register_exitproc+0xe8>)
 32e:	b083      	sub	sp, #12
 330:	0006      	movs	r6, r0
 332:	6828      	ldr	r0, [r5, #0]
 334:	4698      	mov	r8, r3
 336:	000f      	movs	r7, r1
 338:	4691      	mov	r9, r2
 33a:	f7ff ffed 	bl	318 <__retarget_lock_acquire_recursive>
 33e:	4b33      	ldr	r3, [pc, #204]	; (40c <__register_exitproc+0xec>)
 340:	681c      	ldr	r4, [r3, #0]
 342:	23a4      	movs	r3, #164	; 0xa4
 344:	005b      	lsls	r3, r3, #1
 346:	58e0      	ldr	r0, [r4, r3]
 348:	2800      	cmp	r0, #0
 34a:	d052      	beq.n	3f2 <__register_exitproc+0xd2>
 34c:	6843      	ldr	r3, [r0, #4]
 34e:	2b1f      	cmp	r3, #31
 350:	dc13      	bgt.n	37a <__register_exitproc+0x5a>
 352:	1c5a      	adds	r2, r3, #1
 354:	9201      	str	r2, [sp, #4]
 356:	2e00      	cmp	r6, #0
 358:	d128      	bne.n	3ac <__register_exitproc+0x8c>
 35a:	9a01      	ldr	r2, [sp, #4]
 35c:	3302      	adds	r3, #2
 35e:	009b      	lsls	r3, r3, #2
 360:	6042      	str	r2, [r0, #4]
 362:	501f      	str	r7, [r3, r0]
 364:	6828      	ldr	r0, [r5, #0]
 366:	f7ff ffd9 	bl	31c <__retarget_lock_release_recursive>
 36a:	2000      	movs	r0, #0
 36c:	b003      	add	sp, #12
 36e:	bc3c      	pop	{r2, r3, r4, r5}
 370:	4690      	mov	r8, r2
 372:	4699      	mov	r9, r3
 374:	46a2      	mov	sl, r4
 376:	46ab      	mov	fp, r5
 378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 37a:	4b25      	ldr	r3, [pc, #148]	; (410 <__register_exitproc+0xf0>)
 37c:	2b00      	cmp	r3, #0
 37e:	d03d      	beq.n	3fc <__register_exitproc+0xdc>
 380:	20c8      	movs	r0, #200	; 0xc8
 382:	0040      	lsls	r0, r0, #1
 384:	e000      	b.n	388 <__register_exitproc+0x68>
 386:	bf00      	nop
 388:	2800      	cmp	r0, #0
 38a:	d037      	beq.n	3fc <__register_exitproc+0xdc>
 38c:	22a4      	movs	r2, #164	; 0xa4
 38e:	2300      	movs	r3, #0
 390:	0052      	lsls	r2, r2, #1
 392:	58a1      	ldr	r1, [r4, r2]
 394:	6043      	str	r3, [r0, #4]
 396:	6001      	str	r1, [r0, #0]
 398:	50a0      	str	r0, [r4, r2]
 39a:	3240      	adds	r2, #64	; 0x40
 39c:	5083      	str	r3, [r0, r2]
 39e:	3204      	adds	r2, #4
 3a0:	5083      	str	r3, [r0, r2]
 3a2:	3301      	adds	r3, #1
 3a4:	9301      	str	r3, [sp, #4]
 3a6:	2300      	movs	r3, #0
 3a8:	2e00      	cmp	r6, #0
 3aa:	d0d6      	beq.n	35a <__register_exitproc+0x3a>
 3ac:	009a      	lsls	r2, r3, #2
 3ae:	4692      	mov	sl, r2
 3b0:	4482      	add	sl, r0
 3b2:	464a      	mov	r2, r9
 3b4:	2188      	movs	r1, #136	; 0x88
 3b6:	4654      	mov	r4, sl
 3b8:	5062      	str	r2, [r4, r1]
 3ba:	22c4      	movs	r2, #196	; 0xc4
 3bc:	0052      	lsls	r2, r2, #1
 3be:	4691      	mov	r9, r2
 3c0:	4481      	add	r9, r0
 3c2:	464a      	mov	r2, r9
 3c4:	3987      	subs	r1, #135	; 0x87
 3c6:	4099      	lsls	r1, r3
 3c8:	6812      	ldr	r2, [r2, #0]
 3ca:	468b      	mov	fp, r1
 3cc:	430a      	orrs	r2, r1
 3ce:	4694      	mov	ip, r2
 3d0:	464a      	mov	r2, r9
 3d2:	4661      	mov	r1, ip
 3d4:	6011      	str	r1, [r2, #0]
 3d6:	2284      	movs	r2, #132	; 0x84
 3d8:	4641      	mov	r1, r8
 3da:	0052      	lsls	r2, r2, #1
 3dc:	50a1      	str	r1, [r4, r2]
 3de:	2e02      	cmp	r6, #2
 3e0:	d1bb      	bne.n	35a <__register_exitproc+0x3a>
 3e2:	0002      	movs	r2, r0
 3e4:	465c      	mov	r4, fp
 3e6:	328d      	adds	r2, #141	; 0x8d
 3e8:	32ff      	adds	r2, #255	; 0xff
 3ea:	6811      	ldr	r1, [r2, #0]
 3ec:	430c      	orrs	r4, r1
 3ee:	6014      	str	r4, [r2, #0]
 3f0:	e7b3      	b.n	35a <__register_exitproc+0x3a>
 3f2:	0020      	movs	r0, r4
 3f4:	304d      	adds	r0, #77	; 0x4d
 3f6:	30ff      	adds	r0, #255	; 0xff
 3f8:	50e0      	str	r0, [r4, r3]
 3fa:	e7a7      	b.n	34c <__register_exitproc+0x2c>
 3fc:	6828      	ldr	r0, [r5, #0]
 3fe:	f7ff ff8d 	bl	31c <__retarget_lock_release_recursive>
 402:	2001      	movs	r0, #1
 404:	4240      	negs	r0, r0
 406:	e7b1      	b.n	36c <__register_exitproc+0x4c>
 408:	20000430 	.word	0x20000430
 40c:	00000414 	.word	0x00000414
 410:	00000000 	.word	0x00000000

00000414 <_global_impure_ptr>:
 414:	20000008                                ... 

00000418 <_init>:
 418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 41a:	46c0      	nop			; (mov r8, r8)
 41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 41e:	bc08      	pop	{r3}
 420:	469e      	mov	lr, r3
 422:	4770      	bx	lr

00000424 <__init_array_start>:
 424:	000002bd 	.word	0x000002bd

00000428 <__frame_dummy_init_array_entry>:
 428:	000000dd                                ....

0000042c <_fini>:
 42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 42e:	46c0      	nop			; (mov r8, r8)
 430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 432:	bc08      	pop	{r3}
 434:	469e      	mov	lr, r3
 436:	4770      	bx	lr

00000438 <__fini_array_start>:
 438:	000000b5 	.word	0x000000b5
